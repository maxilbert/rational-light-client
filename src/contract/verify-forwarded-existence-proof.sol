pragma solidity >=0.5.0 <0.6.0;
pragma experimental ABIEncoderV2;

import "./rlp-decode.sol";

contract VerifyForwardedExistenceProof {
    
    using RLPDecode for bytes;
    using RLPDecode for uint;
    using RLPDecode for RLPDecode.RLPItem;

    struct existenceProof {
        bytes rlpHeader;
        bytes32 txHash;
        bytes[] rlpTrieNodes;
        uint256[] trieKeys;
    }
    
    struct signature {
        uint8 v;
        bytes32 r;
        bytes32 s;
    }

    event Bytes32(string msg, bytes32 b);
    event Bytes(string msg, bytes h);
    event Bool(string msg, bool b);
    event BytesArray(string msg, bytes[] ba);
    event UintArray(string msg, uint256[] uia);
    
    mapping (uint256 => bytes32) public blockhashes;
    
    constructor() public {
        blockhashes[8426062] = 0xbb41784f87f501da25af08513aa3267524c063037268b59751b7b69b4d65e390; //0x0661d6e95ab1320e93165c37b0e666c96c97b49a8819c02a8cda05c38ff5a97d
        blockhashes[8290728] = 0xcb818dc8816bef7f0690dda4cdd7d1cc50c807310132aa337a35bb5a46438024; //0x14198912703598b497ffbe17e6a90ffa85de276418ae41d217c0e3d2c76290d7
        blockhashes[8429602] = 0x1dfc2529a67c863062b434d7cba71eb921884c388ba96183f2a7c64c8d1753b9; //0x949ae094deb031cbcfb1aaf36ca62b49d5e1d34affbbda16f7323568d8ac2689
        blockhashes[8429146] = 0xa036bb158e21d9aae09faa82860ff522bdc5dff5187dc857561f5fa4d5596bb7; //0x1e39d5b4b46d420e960e12ba2544988bc11c4d4e8c12ceca4871d306afd73d44
    }

    address public lwn = 0x802Fd9c8369AF656196547d3619aEF222bE56777;
    address public rfn_1 = 0x3ca68896d4111E26847100C5328fF4F3F3b31B84;
    address public rfn_2 = 0xd5F4538211bf0F6cCb3c7a7934768E7E2B5703f2;
    
    //
    // Test case 1:
    // 0xf90215a0601e48a9ec198e0fa3c8130bd088397eb25c8f2143ba0ceab776c0530eaa5ffaa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794829bd824b016326a401d083b33d092293333a830a09e10d56ddb125062b5ce43de1b022772cb5cec2c382741832187a92fc692db65a0dc8c85010ffbcc62e70cb0b172a600895550409972241d4b9487e4767a5ec7aaa0d64a31c3b11d9725b612b6baca331f3e6b9243fdd105eae633b8e1d6337f1ce4bc3f019b1ecf837e81a8837a308383042bba845d4825ba947070796520e4b883e5bda9e7a59ee4bb99e9b1bca07eed785f1d2e89eea2ca06f2f8bc46869b77c8575cc02f6c2b00ca19bc71607988a14db2500204bfd3
    // 0x14198912703598b497ffbe17e6a90ffa85de276418ae41d217c0e3d2c76290d7
    // ["0xf851a0a562f8ade1bdb49e380246162ac1002f33621ace67bc062afaf952154233463780808080808080a051b75bd5a95e582e973418e878473a7cc2ce2a98c9495f0a033f83a57f0ded038080808080808080","0xf8d180a0e9afd1a676944917863edc8bef035f5d30abba7114a1086c944aaf50350617fea0114b92df52bd35e79ec702f0c4c17c1ba0273e98c9a5b81003fb21bdb09ffcd8a0848f1f5d46522ef2364565df33a090b42d7f42282df087f97d78eae384e28c01a05355924d0df1cea27e8966a9ee96d1c431a20d5709acc73a77852b312a340fa0a0588050f1495db6cbaf4d60b40c1d44b2ca0d7c8778847acdf002c5e9be341b3ba09205adaf20ccd4e495580b1a0ad96007f59fff4e16e0858f6144f91cda9d753680808080808080808080", "0xf87120b86ef86c028502540be400825208941b9c9c55039898417df74998e00474ae62a2405b880f44bb2a745520008026a091426cf2529c5653d2dd7085571aa45be7dd25e35b6cc70fec865f5d54966330a05a2577d3b93cd6a4cde5385fc3cdb3160e04eb8ebc703bd0fbd969c8216b2136"]
    // [0,3,1]
    //
    // Test case 2:
    // 0xf90219a081006e06c0187be029174178bdbcbfe0dc00de1e388c9b65d2bf248ba8bd89e1a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794829bd824b016326a401d083b33d092293333a830a0c022530a1b8c878682c01af250283e16c1a8081a89d1aaa5321b7e2a029fdef4a030d3ec40c56d2e07b3a13c2b9084713572771c28552e899530d69424723bcc6aa07518271fd759059097d804bc5dca6a2e3a8db1c640eb93753469265b43cc2b49b90100008a110480028008044600000004080000001408004218044420006400000000000a7099015100822800000000050110020008034c040a000002431840300410420458008008004b000030080802508022c0000301420140000000149143088a10842d008a608a18000098800000080001008a01082006801220415600408200404100020083000000100045000000300800181300004000091b004000100120530022800004002030c6048001808010900a404002191800004002080200900040000407402280808000401040090420080382408500a202210004c6944822002012aa140c404500b04009c545188000400000122010186024040018080000088708113ac12c7f898380924e837a120083798e47845d63db16987070796520e4b883e5bda9e7a59ee4bb99e9b1bc7f1e506ea08237766be01f357153aee32cddf0fbc51a0cacf26b3a964a3130541bd6f273c0889dcbbc0806278e1b
    // 0x0661d6e95ab1320e93165c37b0e666c96c97b49a8819c02a8cda05c38ff5a97d
    // ["0xf90111a0f02a040efc997e12606da0bd5233b5c25196ac9c6951759d05c2ddc9130b5e0fa0dfff928b712f6bfe68b9f7fcd4983159dbff4517d743079adfda429f8e352b4ea033120daf33c58f0526fed88ebc05573eeb4ff44cb586254bb95c690b9ed19004a07994b13b28b8a84e79d627b951782db6dac69a3a23512bda682646a873310cc8a0bfedfff90e331fa9184459821e03f31fa21b52e6869991330c5b6ca69451fe6fa04087967444f2e517b6aec28ce5031614706ea633b7b42d61d9d7555f62b3a1cda061c1fa6156fb5801051c8c3d470e5eb7b29013cb99cc1cca0a8026c6cb9e518d80a0419ccd4064db52be3609f841f7d9dfc00361fb7da210578a0c085fb4143ce4a48080808080808080", "0xf90211a0a57ae364ef23c7cffc47415e0c03ab9263a8109f61f1300161281aa8c880a72da00389385cd20ae930b0a077abfacfc0e20c615b71bb52811d237b8a8477887882a0d99e60d9ca6289b23425b3050814a544e8e576695d44a86ad13add77ca1fd2d3a0d5b5a4641d817af5a159013dacb053fe947b40ae2087f205371b32caaaacbbafa024c59bd85dbbd158d1e3cadc400b2eaad2f737520e62c0eb666a60d940589e67a08b87a30460751423d8c6734194d2fad3ad9296ceb910426d530a623126b00ab5a0d2f393a51c4d07f8042c6b402bdb807cc03d63e126131bee7893377e292ca3eaa057b95a620136188428d02a9054bbc7c2e5d75548d4ba83bc1a019fededf841efa0250f2ea4ea2790230da039a3b20054041cf80ccd159b68227dff5ca15987ac5ca0bdae1e45e9b7bda77aab53877101ee87ed6b744c0328b2921b9f246fe979b5c0a00a89faee1a671c8e6e162edfbb4cbb48a478d5b2ac9db78354418d1b781c554ca0d03f05ccdc38b6a8657a196187704e4262cfa043e8e304d9fc8d499b7dbef4b4a001787d8741f82b8acf8251e5e6c374ccd6378eb3d717e0a7cca1dfe888c81b19a0fae95fa6e58cdd6e1b6e13c224715d8c424212106a31965d3c947ff264ba4b50a0fe3166fec430ee042255030fd82c50d1a211d1aef9fd7263e7c4429880cedfcca0e7b52ea72695615a51e9ee4baac9ae795187d3416d0b98d438cfe743dba7ad1680", "0xf87420b871f86f82b1d085028fa6ae00830186a094e76b4320cd6246b87d5c7e905f3c56618d3e4099881111d67bb1bb00008026a0c8fe399bd000fdd89f7d4c4c669695695a2b5175060f2bbae50ed458ecc1e0f6a03647482c60ba4633a6082fe354964fae13a442c644cbef3d0d04c1f74867e86b"]
    // [5, 11, 1]
    //
    // Test case 3:
    // 0xf90217a07d7c5a485f7832e1ca25b769354f9d261d35fb02b69fd2a48def02506d7ee775a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ea674fdde714fd979de3edf0f56aa9716b898ec8a026f417f798d9c3d1076b030220ed71fbed077375b8ee400a71fc7b75d9d60d38a0404e40fa33188ef3a5226eaa973bfa88544876727b99465da862c9f86329f826a0241e5e8cc958c4115e3459be1fb211b5e8c2683fd58bcbb86fe9aee9cd307784b90100924120844c00a4c202832a106404898120204060202860681424c4044702424040105458e5d4428c718c09088a240541416a45923320cc054421671083313042a065b000a242850d0820800810824400c7102c008e22820080106a60534192d498018085018092449d305c981488004101329400a002c48904803310685078031483905c26042c8105c001148505010200490cb355a00a15c9494a20f291422006aa61a00d00f084a4b42cb000009224020a10c00885113c2d0b6028986c260808900d628000013b869bc361041a80082000ac980088c8340c000240001ca481831814097d000313390130941c9cb08090054a00002000dc6001f00724940e208707c6f2645ee2828380a022837a21288378cfe4845d64985696505059452d65746865726d696e652d61736961312d34a056fdf85c11b927850a5d204a4f269130e87815fa378a8cb942e793cb6638f6f2881eda81053e24d05d
    // 0x949ae094deb031cbcfb1aaf36ca62b49d5e1d34affbbda16f7323568d8ac2689
    // ["0xf90131a062e9398db032dd6c401390db73bb813cf669f238ecaff0b0066da02fc0ff10dba01c4eac69fd693b6c3b679240e855bb965d8508c5abaf619be147da57d5efeb8da0222e0d2ee97be6c3292b212a7f6a9fe67a48b7d21a46cdb8ffe073dc8cfd42a1a0b1f16b2c30108af0225e36349131fd01d87f656ddf7165b9019c029233cce0d5a0ee0febd8e78edb42f24e73b50a4ae0fb052c33cb00191446425ea5a9c54c8199a0947e91bfd29e751ac04bbe47e97dc550ff8942fd634c5d7553182239ef512f9ba07f6c2af9e6dbd9db8df205ade0e18c10ee9c0802705272399aab2bc0aea2c294a02505d0b053067263b15bdc0e32747371b91ebe23bc11916989fa07e6f60a6bcda0e58e97441710b910ec3513abd26b121fda8d5e3e7263ed585aa4ff4dcf73bd618080808080808080", "0xf90211a0f4cb7618a10aec7f3a3f5a320b6be17d673f806f603f284c836dec89c8f531fba022d2e743581468ab667b1ca577a6834804dc5f22bf15813847e94af339993f5ca04b7cb7fc67733ac9ff05e6f39652d6f1e93ced7663070a0a7232a3b015f9be68a0025cbb84cc076fc421b475dcf3fc1c83b3518d411ea98f5cdfe85beb094d3617a042e4a060bb4c4b9ab3eb1e8b81af54d904e2ba9f3b64feb54165fcbbff08838ca0e953bce4ba7b89e6090fb1f4291a7ec12c5a00ce7abceae1fd6de1540e570192a028905022e61f08fa8659b03df5220a6fcef3d54b5c16130f94beb864f07d1258a0508f7e3fa37e630171b3a1a13940488e55d3ca848b1948157b0774aba6c8f175a0045fd349e5f52b419740eb3c2c7c8144f12006e7f6290284143609df145152b4a09032ea9e4a5a68aa462f441b526c619c98887b2ebcd1f2702a1a155d105f6ac0a0892b152f88f6a75fa40241d18735c551e9030efae2e519f2e6425632dbb03f8fa059eda0988dd71d556be03be73452219c4b9b0d723bb856fc4977d6eef129186ba046d1a4b86e6c50bbd057786ee3085bcf6ce1d2e0500b08f03a591032f6180725a00c704e7e45f878942010685ca67477bd8ebadf51d787c3c7095f7452e149ca32a034c7fe56e0bd3d721532f82a4af59c8019e8b27b79cf3cd06d78c02ab1f914d2a09bd758d90cb4274a2a46c8ffcebde6dddc0074dacac9504328f655faee92016180", "0xf87420b871f86f8247c485051f4d5c0083015f9094517dd472d86c0388b71a5d31c2c509d3ea97f836888ab55f8b520780008026a011dc6365cf58c966c795765b495417664d23010dc30157b598a318e4cc550c20a06dda036a5b35ebd6edf20e092fb945ff5e28d1ddf09c74a32d03f51ef4e761b9"]
    // [4, 14, 1]
    //
    // Test case 4:
    // 0xf9020ba0e1a81f7c00c47184ab54fc59239e6259ea54ae5cbd3afe3b4c95076cc6a93469a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479404668ec2f57cc15c381b461b9fedab5d451c8f7fa0324de052bc2d2cc1af5bebe90c4501faa906a4ad0fdf94485ec1ea7fe1473649a01ff4241bc0160384643b2ee8b432a10066d8054f95b2fadf4470c87023115084a0c02effb503159041c53f9ca7c260720ec7f34b4b52d27bd3615f6472628ba9b8b90100830008440001418800c90c02c288188803c0101c0800a41c970000c5a0402100043b0000848540489281480514507d4a521914000d082081130a494060bc4200c00038092c0a252c10028c4c10014a62881c22c11a0ee220222921b4b1402814021081003a200240009d410014180c0900e01880010050008e2865531a4053234c40810404004010a0834c109073245401c059004883004283003103041009e100012084090004013c91968065560410c000c02829020100501002201a2400080800e242200000402000115004b24308a92b0941084848640b40c00432026821e6002060140400260200320410302a210100894a0000100314189c01001810008707c47052b61c5383809e5a837a1200837a0186845d6480158a706f6f6c775f30303036a039c5c2b0f5879e3f16fc8b6b90200519b71f563f1e2303e15534a57d0da9103b8841f793d0020b2ec2
    // 0x1e39d5b4b46d420e960e12ba2544988bc11c4d4e8c12ceca4871d306afd73d44
    // ["0xf90131a08e3df4fb36149b3146bb5442cd94dfc89bc6a0d824b4540b0ad1b1762358e82aa0444a5343b1b4599a4455606386b6e327c3cf71e2f6090455c1b0f7a1102f244ca0ff327ddcb0dafe5bfb82796bfe4a43ca50a21b8e66614e799d789df3d3c4bc68a062ca7b926d06fbed51738f50bd84a9648afc8eabd981e3c41fc369febd474bb2a094e86941d6bf9b64702868c3a31b0a7c55212c91c207804a82239342fc3ab75da04a6d84b8a8956068921b5f93dea69d6bf64d04667bafd4afdbb64443a98979d7a095badee38d185ff03337e74af3e5fd33e55ccecda5f15e8ed69f46ad338090e6a0cf82169bdf0deeb7744d417b744e8eff439413df98d37b023183ba39fd175ea1a01fdb00dcc58e1f481fcd6a15068ac075266a6094a01ab957003fcede7ca5b3558080808080808080", "0xf871a0a9dc24b4d2ab48845a8133fe920b62faed92d0f9b2fd492519bfe0d26dcbe2e7a0ee380ee7d3c7c034ce8399f566f3830430d00bef7a8db16d2ca36694d6dc7565a030b28c7a060844e8e78c526143cfddb5030ac0d830d0496d0e7e26f3ada3ede48080808080808080808080808080", "0xf901118080808080808080a00c4ba50ee8db9de528ea3730fa853f6ea416d3fea9b9557f58b56789e28c0cf2a06b58b6c6731aee0bd089d0418d4514ba7690d923b02b4b53ec895a95dae6130aa0f1b11c063d891074648eacfd282e736647eda5dded0518b846b06a2a043468e2a014b2049cbc55e1cb81f96c0e5c3c823b431d27496547835bfba437f508752faba0e1a0be7e8db0655e2c0613c76e33f8d0f46cfb1360eaf1d337bee8b9e19d9dcca0ec858c2586047b86000036bb7e55ec8d5b30760e6cebf3c0cbc0da415f3dd5dba06497203f522a78f1253e31d8154d0a9f11b93cd41fe7b5d196a9b4227a084456a017e94aa9feec2d70d94938310b05aac9730e01373d3b1baf96d2a44bf250c8f380", "0xf90211a076ae0eef9786c922b101ea3f27598d559c3b1c5d10d9fd1a6170f22ece284132a01e8d8221de3ff3cccc4875e06320a81a6b7dd349b903a3a4b7679813a1092ccca019d993526242da8a200ebd5f9951a5810f3fecb6540e22444f9ccef7d1fcfe4ca06a1f05870ac32892be58bdccff2e628521d32d4e6dfecb9fae53668887a0a0b7a0deeb4e76cbf8a71981fa2d16b99455c84bd1876bce5464cce1f7f63ce7e8581ba00e56a40a033ff28e9fe4dffaddae81790ccfeab56b164e849485b81fb1555aa8a012c9186cd9bce26773cfcdfb074c3017be557e80f127182a3ad42844ce226ce9a06715e9f0d9a174f7c0b841b67c88fba0bb59fc36ee18046f578d90e47254770ca03fb581b9aae052343922bf4a511cc88291bbe413aaba0c20b8b068902583b25ea0723fcdc13f06e58cacdf092758e2fc7f040e012ed9febfb6ce2ad42259304f98a0753a1d2f0a56f8a0cf83c4919f91c11682ba423cea4591ac082754953149fc15a0fdf22ec9c6e901dc2e84f4737c05fe8ed8827ee07abadfbb36533ee2821f407fa0253e053cc5ac15e021ae94dbb93caa61c1b2081f300b04fb1dd88e578cdab235a09c2ce6904bbfa1bf74e9f0a6d9770a5db9ceb611dcb3fd4d3820ebc28d752fbea00c99bf4eb0f07adc1aa54c1d20e38584c005d51008109994dfa6cdb3abd12ff2a0d0b388538232b90dad510460c810b70af7df227e95e3ad1545dd9cbb0bfeabd180", "0xf87120b86ef86c0b8501a13b8600825208940f70eadf7de74f214612aa5bb3ada6da15c56a4c8811e7002a504100008025a04c246e556abcc07b3937d982a637a059ce855740ac0866eaf8b7bc626e6d88bca0344e70319c1dfb4042f28ea8240bad17bb93843d89061a5ff26b5b6bdf1f2d52"]
    // [8, 1, 9, 12, 1]
    //
    function verifyForwardedExistenceProof(bytes memory rlpHeader, bytes32 txHash, bytes[] memory rlpTrieNodes, uint256[] memory trieKeys, uint8 v, bytes32 r, bytes32 s) view public returns (address) {
            bytes32 digest = keccak256(abi.encode(rlpHeader, txHash, rlpTrieNodes, trieKeys));
            address rfn = verifySig(digest, v, r, s);
            bytes memory rootHash = getTrieRootHash(rlpHeader); 
            if (verifyTrieProof(rootHash, txHash, rlpTrieNodes, trieKeys)) {
               return rfn; 
            } else {
                return address(0x0);
            }
    }

// Test case 1:
//["0xf90217a07d7c5a485f7832e1ca25b769354f9d261d35fb02b69fd2a48def02506d7ee775a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ea674fdde714fd979de3edf0f56aa9716b898ec8a026f417f798d9c3d1076b030220ed71fbed077375b8ee400a71fc7b75d9d60d38a0404e40fa33188ef3a5226eaa973bfa88544876727b99465da862c9f86329f826a0241e5e8cc958c4115e3459be1fb211b5e8c2683fd58bcbb86fe9aee9cd307784b90100924120844c00a4c202832a106404898120204060202860681424c4044702424040105458e5d4428c718c09088a240541416a45923320cc054421671083313042a065b000a242850d0820800810824400c7102c008e22820080106a60534192d498018085018092449d305c981488004101329400a002c48904803310685078031483905c26042c8105c001148505010200490cb355a00a15c9494a20f291422006aa61a00d00f084a4b42cb000009224020a10c00885113c2d0b6028986c260808900d628000013b869bc361041a80082000ac980088c8340c000240001ca481831814097d000313390130941c9cb08090054a00002000dc6001f00724940e208707c6f2645ee2828380a022837a21288378cfe4845d64985696505059452d65746865726d696e652d61736961312d34a056fdf85c11b927850a5d204a4f269130e87815fa378a8cb942e793cb6638f6f2881eda81053e24d05d", "0x949ae094deb031cbcfb1aaf36ca62b49d5e1d34affbbda16f7323568d8ac2689", ["0xf90131a062e9398db032dd6c401390db73bb813cf669f238ecaff0b0066da02fc0ff10dba01c4eac69fd693b6c3b679240e855bb965d8508c5abaf619be147da57d5efeb8da0222e0d2ee97be6c3292b212a7f6a9fe67a48b7d21a46cdb8ffe073dc8cfd42a1a0b1f16b2c30108af0225e36349131fd01d87f656ddf7165b9019c029233cce0d5a0ee0febd8e78edb42f24e73b50a4ae0fb052c33cb00191446425ea5a9c54c8199a0947e91bfd29e751ac04bbe47e97dc550ff8942fd634c5d7553182239ef512f9ba07f6c2af9e6dbd9db8df205ade0e18c10ee9c0802705272399aab2bc0aea2c294a02505d0b053067263b15bdc0e32747371b91ebe23bc11916989fa07e6f60a6bcda0e58e97441710b910ec3513abd26b121fda8d5e3e7263ed585aa4ff4dcf73bd618080808080808080", "0xf90211a0f4cb7618a10aec7f3a3f5a320b6be17d673f806f603f284c836dec89c8f531fba022d2e743581468ab667b1ca577a6834804dc5f22bf15813847e94af339993f5ca04b7cb7fc67733ac9ff05e6f39652d6f1e93ced7663070a0a7232a3b015f9be68a0025cbb84cc076fc421b475dcf3fc1c83b3518d411ea98f5cdfe85beb094d3617a042e4a060bb4c4b9ab3eb1e8b81af54d904e2ba9f3b64feb54165fcbbff08838ca0e953bce4ba7b89e6090fb1f4291a7ec12c5a00ce7abceae1fd6de1540e570192a028905022e61f08fa8659b03df5220a6fcef3d54b5c16130f94beb864f07d1258a0508f7e3fa37e630171b3a1a13940488e55d3ca848b1948157b0774aba6c8f175a0045fd349e5f52b419740eb3c2c7c8144f12006e7f6290284143609df145152b4a09032ea9e4a5a68aa462f441b526c619c98887b2ebcd1f2702a1a155d105f6ac0a0892b152f88f6a75fa40241d18735c551e9030efae2e519f2e6425632dbb03f8fa059eda0988dd71d556be03be73452219c4b9b0d723bb856fc4977d6eef129186ba046d1a4b86e6c50bbd057786ee3085bcf6ce1d2e0500b08f03a591032f6180725a00c704e7e45f878942010685ca67477bd8ebadf51d787c3c7095f7452e149ca32a034c7fe56e0bd3d721532f82a4af59c8019e8b27b79cf3cd06d78c02ab1f914d2a09bd758d90cb4274a2a46c8ffcebde6dddc0074dacac9504328f655faee92016180", "0xf87420b871f86f8247c485051f4d5c0083015f9094517dd472d86c0388b71a5d31c2c509d3ea97f836888ab55f8b520780008026a011dc6365cf58c966c795765b495417664d23010dc30157b598a318e4cc550c20a06dda036a5b35ebd6edf20e092fb945ff5e28d1ddf09c74a32d03f51ef4e761b9"], [4, 14, 1]]
//[28, "0xa27164e3c1a78b182444e3cd305443581362458cc6beb30c9974dbfcda6332e8", "0x1d07fbd154c0e39357590efad43c386b387c8e9450cd0bf0a30617b6c4f1a6fc"]
//[28, "0xa27164e3c1a78b182444e3cd305443581362458cc6beb30c9974dbfcda6332e8", "0x1d07fbd154c0e39357590efad43c386b387c8e9450cd0bf0a30617b6c4f1a6fc"]
    function verifyForwardedExistenceProof_1(existenceProof memory proof, signature memory sig) view public returns (address) {
            bytes32 digest = keccak256(abi.encode(proof.rlpHeader, proof.txHash, proof.rlpTrieNodes, proof.trieKeys));
            address rfn = verifySig(digest, sig.v, sig.r, sig.s);
            bytes memory rootHash = getTrieRootHash(proof.rlpHeader); 
            if (verifyTrieProof(rootHash, proof.txHash, proof.rlpTrieNodes, proof.trieKeys)) {
               return rfn; 
            } else {
                return address(0x0);
            }
    }

    function verifyTrieProof(bytes memory rootHash, bytes32 txHash, bytes[] memory rlpTrieNodes, uint256[] memory keys) pure internal returns (bool) {
        bytes memory nodeHash = rootHash;
        if (rlpTrieNodes.length != keys.length) {
            return false;
        }
        uint i = 0;
        while (i < rlpTrieNodes.length - 1) {
            if (bytesToBytes32(nodeHash) != keccak256(rlpTrieNodes[i])) {
                return false;
            }
            nodeHash = decodeRlpTrieNode(rlpTrieNodes[i])[keys[i]];
            i = i + 1;
        }
        if (bytesToBytes32(nodeHash) != keccak256(rlpTrieNodes[i])) {
            return false;
        }
        bytes memory tx_rlp = decodeRlpTrieNode(rlpTrieNodes[i])[keys[i]];
        if (txHash != keccak256(tx_rlp)) {
            return false;
        }
        return true;
    }
    
    function decodeRlpTrieNode(bytes memory item) internal pure returns (bytes[] memory) {
        RLPDecode.RLPItem[] memory items = item.toRlpItem().toList();
        bytes[] memory bytes_itmes = new bytes[](items.length);
        for (uint i = 0; i < items.length; i++) {
            bytes_itmes[i] = items[i].toBytes();
        }
        return bytes_itmes;
    }
    
    function getTrieRootHash(bytes memory rlpHeader) internal view returns (bytes memory) {
        return decodeRlpBlockHeader(rlpHeader);
    }
  
    function decodeRlpBlockHeader(bytes memory item) internal view returns (bytes memory) {
        RLPDecode.RLPItem[] memory items = item.toRlpItem().toList();
        if (blockhashes[items[8].toUint()] != keccak256(item)) {
            bytes memory zero = "0x0";
            return zero;
        }
        return items[4].toBytes();
    }
    
    function bytesToBytes32(bytes memory  _input) internal pure returns (bytes32) {
        bytes32 result;
        assembly {
            result := mload(add(_input, 32))
        }
        return result;
    }
    
    function verifySig(bytes32 _digest, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {
        address signer = ecrecover(_digest, _v, _r, _s);
        return signer;
    }
    
}
